# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  - id: "Create a dedicated database"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "/bin/bash"
    args:
      - "-c"
      - |
        ./test/retry.sh "gcloud sql databases create ${_DB_NAME} \
          --instance ${_DB_INSTANCE} \
          --project ${PROJECT_ID}"

  - id: "Create a dedicated database user"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "/bin/bash"
    args:
      - "-c"
      - |
        echo -n "${_DB_PASS}" > db_password
        ./test/retry.sh "gcloud sql users create ${_DB_USER} \
          --password $(cat db_password) \
          --instance ${_DB_INSTANCE} \
          --project ${PROJECT_ID}"
        rm db_password

  - id: "Create a dedicated storage bucket"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "/bin/bash"
    args:
      - "-c"
      - |
        ./test/retry.sh "gsutil mb \
          -l ${_REGION} \
          -p ${PROJECT_ID} \
          gs://${_STORAGE_BUCKET}"

  - id: "Add Django secrets to Secret Manager"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "/bin/bash"
    args:
      - "-c"
      - |
        echo "
        DATABASE_URL=postgres://${_DB_USER}:${_DB_PASS}@//cloudsql/${_CLOUD_SQL_CONNECTION_NAME}/${_DB_NAME}
        GS_BUCKET_NAME=${_STORAGE_BUCKET}
        SECRET_KEY=$(cat /dev/urandom | LC_ALL=C tr -dc '[:alpha:]' | fold -w 30 | head -n1)
        PASSWORD_NAME=${_SECRET_PASSWORD_NAME}" > ${_SECRET_SETTINGS_NAME}

        ./test/retry.sh "gcloud secrets create ${_SECRET_SETTINGS_NAME} \
          --project $PROJECT_ID \
          --data-file=${_SECRET_SETTINGS_NAME}"

        gcloud secrets add-iam-policy-binding ${_SECRET_SETTINGS_NAME} \
        --member serviceAccount:$(gcloud projects list --filter "name=${PROJECT_ID}" --format "value(projectNumber)")@cloudbuild.gserviceaccount.com \
        --role roles/secretmanager.secretAccessor \
        --project ${PROJECT_ID}

        rm ${_SECRET_SETTINGS_NAME}

        echo -n "${_SECRET_PASSWORD_VALUE}" > ${_SECRET_PASSWORD_NAME}

        ./test/retry.sh "gcloud secrets create ${_SECRET_PASSWORD_NAME} \
          --project $PROJECT_ID \
          --data-file=${_SECRET_PASSWORD_NAME}"

        gcloud secrets add-iam-policy-binding ${_SECRET_PASSWORD_NAME} \
          --member serviceAccount:$(gcloud projects list --filter "name=${PROJECT_ID}" --format "value(projectNumber)")@cloudbuild.gserviceaccount.com \
          --role roles/secretmanager.secretAccessor \
          --project ${PROJECT_ID}

        rm ${_SECRET_PASSWORD_NAME}

  - id: "Build Container Image"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: "/bin/bash"
    args:
      - "-c"
      - |
        ./test/retry.sh "docker build -t gcr.io/${PROJECT_ID}/${_SERVICE}:${_VERSION} ."

  - id: "Push Container Image"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: "/bin/bash"
    args:
      - "-c"
      - |
        ./test/retry.sh "docker push gcr.io/${PROJECT_ID}/${_SERVICE}:${_VERSION}"

  - id: "Migrate database"
    name: "gcr.io/google-appengine/exec-wrapper"
    args:
      [
        "-i",
        "gcr.io/$PROJECT_ID/${_SERVICE}:${_VERSION}",
        "-s",
        "${_CLOUD_SQL_CONNECTION_NAME}",
        "-e",
        "SETTINGS_NAME=${_SECRET_SETTINGS_NAME}",
        "-e",
        "PASSWORD_NAME=${_SECRET_PASSWORD_NAME}",
        "--",
        "python",
        "manage.py",
        "migrate",
      ]

  - id: "Collect static"
    name: "gcr.io/google-appengine/exec-wrapper"
    args:
      [
        "-i",
        "gcr.io/$PROJECT_ID/${_SERVICE}:${_VERSION}",
        "-s",
        "${_CLOUD_SQL_CONNECTION_NAME}",
        "-e",
        "SETTINGS_NAME=${_SECRET_SETTINGS_NAME}",
        "--",
        "python",
        "manage.py",
        "collectstatic",
        "--verbosity",
        "2",
        "--no-input",
      ]

  - id: "Deploy to Cloud Run"
    name: "gcr.io/cloud-builders/gcloud:latest"
    entrypoint: /bin/bash
    args:
      - "-c"
      - |
        ./test/retry.sh "gcloud run deploy ${_SERVICE} \
          --project $PROJECT_ID \
          --image gcr.io/${PROJECT_ID}/${_SERVICE}:${_VERSION} \
          --no-allow-unauthenticated \
          --region ${_REGION} \
          --platform ${_PLATFORM} \
          --add-cloudsql-instances ${_CLOUD_SQL_CONNECTION_NAME} \
          --update-env-vars SETTINGS_NAME=${_SECRET_SETTINGS_NAME}"

images:
  - gcr.io/${PROJECT_ID}/${_SERVICE}:${_VERSION}

substitutions:
  _SERVICE: django
  _VERSION: manual
  _REGION: us-central1
  _PLATFORM: managed
  _STORAGE_BUCKET: ${PROJECT_ID}-bucket
  _DB_INSTANCE: django-instance
  _CLOUD_SQL_CONNECTION_NAME: $PROJECT_ID:us-central1:django-instance
  _DB_NAME: postgres
  _DB_USER: postgres
  _DB_PASS: password1234
  _SECRET_SETTINGS_NAME: django_settings
  _SECRET_PASSWORD_NAME: admin_password
  _SECRET_PASSWORD_VALUE: password
